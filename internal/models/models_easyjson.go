// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"

	pq "github.com/lib/pq"
	easyjson "github.com/zerodha/easyjson"
	jlexer "github.com/zerodha/easyjson/jlexer"
	jwriter "github.com/zerodha/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalModels(in *jlexer.Lexer, out *Projects) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Projects, 0, 0)
			} else {
				*out = Projects{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Project
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalModels(out *jwriter.Writer, in Projects) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Projects) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{FloatFmt: ""}
	easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Projects) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Projects) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Projects) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalModels(l, v)
}
func easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalModels1(in *jlexer.Lexer, out *ProjectURLs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ProjectURLs, 0, 2)
			} else {
				*out = ProjectURLs{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 ProjectURL
			(v4).UnmarshalEasyJSON(in)
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalModels1(out *jwriter.Writer, in ProjectURLs) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			(v6).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ProjectURLs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{FloatFmt: ""}
	easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProjectURLs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProjectURLs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProjectURLs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalModels1(l, v)
}
func easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalModels2(in *jlexer.Lexer, out *ProjectURL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "webpage_url":
			out.WebpageURL = string(in.String())
		case "repository_url":
			out.RepositoryURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalModels2(out *jwriter.Writer, in ProjectURL) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"webpage_url\":"
		out.RawString(prefix[1:])
		out.String(string(in.WebpageURL))
	}
	{
		const prefix string = ",\"repository_url\":"
		out.RawString(prefix)
		out.String(string(in.RepositoryURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProjectURL) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{FloatFmt: ""}
	easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProjectURL) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProjectURL) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProjectURL) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalModels2(l, v)
}
func easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalModels3(in *jlexer.Lexer, out *Project) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "guid":
			out.GUID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "licenses":
			if in.IsNull() {
				in.Skip()
				out.Licenses = nil
			} else {
				in.Delim('[')
				if out.Licenses == nil {
					if !in.IsDelim(']') {
						out.Licenses = make(pq.StringArray, 0, 4)
					} else {
						out.Licenses = pq.StringArray{}
					}
				} else {
					out.Licenses = (out.Licenses)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Licenses = append(out.Licenses, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make(pq.StringArray, 0, 4)
					} else {
						out.Tags = pq.StringArray{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v8 string
					v8 = string(in.String())
					out.Tags = append(out.Tags, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "webpage_url":
			out.WebpageURLStr = string(in.String())
		case "webpage_wellknown":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.WebpageWellKnownStr).UnmarshalJSON(data))
			}
		case "repository_url":
			out.RepositoryURLStr = string(in.String())
		case "repository_wellknown":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.RepositoryWellKnownStr).UnmarshalJSON(data))
			}
		case "entity":
			(out.Entity).UnmarshalEasyJSON(in)
		case "id":
			out.ID = int(in.Int())
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalModels3(out *jwriter.Writer, in Project) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"guid\":"
		out.RawString(prefix[1:])
		out.String(string(in.GUID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"licenses\":"
		out.RawString(prefix)
		if in.Licenses == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Licenses {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.String(string(v10))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Tags {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"webpage_url\":"
		out.RawString(prefix)
		out.String(string(in.WebpageURLStr))
	}
	{
		const prefix string = ",\"webpage_wellknown\":"
		out.RawString(prefix)
		out.Raw((in.WebpageWellKnownStr).MarshalJSON())
	}
	{
		const prefix string = ",\"repository_url\":"
		out.RawString(prefix)
		out.String(string(in.RepositoryURLStr))
	}
	{
		const prefix string = ",\"repository_wellknown\":"
		out.RawString(prefix)
		out.Raw((in.RepositoryWellKnownStr).MarshalJSON())
	}
	{
		const prefix string = ",\"entity\":"
		out.RawString(prefix)
		(in.Entity).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Project) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{FloatFmt: ""}
	easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Project) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Project) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Project) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalModels3(l, v)
}
func easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalModels4(in *jlexer.Lexer, out *ManifestExport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "url":
			out.URL = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "manifest_json":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ManifestJSON).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalModels4(out *jwriter.Writer, in ManifestExport) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"manifest_json\":"
		out.RawString(prefix)
		out.Raw((in.ManifestJSON).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ManifestExport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{FloatFmt: ""}
	easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ManifestExport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ManifestExport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ManifestExport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalModels4(l, v)
}
func easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalModels5(in *jlexer.Lexer, out *ManifestData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "entity":
			(out.Entity).UnmarshalEasyJSON(in)
		case "projects":
			(out.Projects).UnmarshalEasyJSON(in)
		case "funding":
			(out.Funding).UnmarshalEasyJSON(in)
		case "id":
			out.ID = int(in.Int())
		case "guid":
			out.GUID = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "url":
			out.URLStr = string(in.String())
		case "meta":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Meta).UnmarshalJSON(data))
			}
		case "status":
			out.Status = string(in.String())
		case "status_message":
			if in.IsNull() {
				in.Skip()
				out.StatusMessage = nil
			} else {
				if out.StatusMessage == nil {
					out.StatusMessage = new(string)
				}
				*out.StatusMessage = string(in.String())
			}
		case "crawl_errors":
			out.CrawlErrors = int(in.Int())
		case "crawl_message":
			if in.IsNull() {
				in.Skip()
				out.CrawlMessage = nil
			} else {
				if out.CrawlMessage == nil {
					out.CrawlMessage = new(string)
				}
				*out.CrawlMessage = string(in.String())
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalModels5(out *jwriter.Writer, in ManifestData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"entity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Entity).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"projects\":"
		out.RawString(prefix)
		(in.Projects).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"funding\":"
		out.RawString(prefix)
		(in.Funding).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"guid\":"
		out.RawString(prefix)
		out.String(string(in.GUID))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URLStr))
	}
	{
		const prefix string = ",\"meta\":"
		out.RawString(prefix)
		out.Raw((in.Meta).MarshalJSON())
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"status_message\":"
		out.RawString(prefix)
		if in.StatusMessage == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.StatusMessage))
		}
	}
	{
		const prefix string = ",\"crawl_errors\":"
		out.RawString(prefix)
		out.Int(int(in.CrawlErrors))
	}
	{
		const prefix string = ",\"crawl_message\":"
		out.RawString(prefix)
		if in.CrawlMessage == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.CrawlMessage))
		}
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ManifestData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{FloatFmt: ""}
	easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ManifestData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ManifestData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ManifestData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalModels5(l, v)
}
func easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalModels6(in *jlexer.Lexer, out *EntityURL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "webpage_url":
			out.WebpageURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalModels6(out *jwriter.Writer, in EntityURL) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"webpage_url\":"
		out.RawString(prefix[1:])
		out.String(string(in.WebpageURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EntityURL) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{FloatFmt: ""}
	easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EntityURL) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EntityURL) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EntityURL) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalModels6(l, v)
}
func easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalModels7(in *jlexer.Lexer, out *Entity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "manifest_id":
			out.ManifestID = int(in.Int())
		case "manifest_guid":
			out.ManifestGUID = string(in.String())
		case "manifest_url":
			out.ManifestURLStr = string(in.String())
		case "num_projects":
			out.NumProjects = int(in.Int())
		case "type":
			out.Type = string(in.String())
		case "role":
			out.Role = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "phone":
			out.Phone = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "webpage_url":
			out.WebpageURLStr = string(in.String())
		case "webpage_wellknown":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.WebpageWellKnownStr).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalModels7(out *jwriter.Writer, in Entity) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"manifest_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ManifestID))
	}
	{
		const prefix string = ",\"manifest_guid\":"
		out.RawString(prefix)
		out.String(string(in.ManifestGUID))
	}
	{
		const prefix string = ",\"manifest_url\":"
		out.RawString(prefix)
		out.String(string(in.ManifestURLStr))
	}
	{
		const prefix string = ",\"num_projects\":"
		out.RawString(prefix)
		out.Int(int(in.NumProjects))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.Role))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"webpage_url\":"
		out.RawString(prefix)
		out.String(string(in.WebpageURLStr))
	}
	{
		const prefix string = ",\"webpage_wellknown\":"
		out.RawString(prefix)
		out.Raw((in.WebpageWellKnownStr).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Entity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{FloatFmt: ""}
	easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalModels7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Entity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalModels7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Entity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalModels7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Entity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalModels7(l, v)
}
